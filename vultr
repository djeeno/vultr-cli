#!/usr/bin/env bash
# shellcheck disable=SC1090

##
# If in non interactive shell ( "$-" not containing "i" ),
# execute script as command.
##
if ! { echo "$-" | grep -q i; }; then
# -- Non Interactive ----------------

# If an error occurs, EXIT abnormally.
set -e -o pipefail

vultrPrintStderr() {
  echo "$*" 1>&2
}

checkDependency() { (
  for cmd in "$@"; do
    if ! command -v -- "${cmd}" >/dev/null; then
      vultrPrintStderr "\"${cmd}\" not found in \$PATH"
      exit 1
    fi
  done
)}
checkDependency curl jq

VultrCredentialsFile="$HOME/.vultr/credentials"

vultrConfigure() {
  if [ -e "${VultrCredentialsFile}" ]; then
    vultrPrintStderr "already exist: ${VultrCredentialsFile}"
    exit 1
  fi
  mkdir -p "$(dirname "${VultrCredentialsFile}")"
  echo "ref. https://my.vultr.com/settings/#settingsapi"
  stty -echo
  printf '%s' 'Vultr API key: '
  read -r VultrAPIKey
  stty echo
  echo
  if [ -z "${VultrAPIKey}" ]; then
    vultrPrintStderr "Vultr API key not set"
    exit 1
  fi
  echo "VultrAPIKey=${VultrAPIKey}" | tee "${VultrCredentialsFile}" 1>/dev/null
  chown -R "$(id -u)":"$(id -g)" "$(dirname "${VultrCredentialsFile}")"
  chmod -R go-rwx "$(dirname "${VultrCredentialsFile}")"
}

vultrSetCredentials() {
  if [ -f "${VultrCredentialsFile}" ] && [ -r "${VultrCredentialsFile}" ]; then
    . "${VultrCredentialsFile}"
  else
    vultrPrintStderr "Credentials file does not found: ${VultrCredentialsFile}"
    vultrPrintStderr "For set credentials, run:"
    vultrPrintStderr "  $ vultr configure"
    exit 1
  fi
}

vultrOSList() {
  # ref. https://www.vultr.com/api/#os_os_list
  vultrSetCredentials
  response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/os/list")
  echo "${response}" | jq . 2>/dev/null || vultrPrintStderr "${response}"
}

vultrPlansList() {
  # ref. https://www.vultr.com/api/#plans_plan_list
  vultrSetCredentials
  response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/plans/list")
  echo "${response}" | jq . 2>/dev/null || vultrPrintStderr "${response}"
}

vultrRegionsList() {
  # ref. https://www.vultr.com/api/#regions_region_list
  vultrSetCredentials
  response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/regions/list")
  echo "${response}" | jq . 2>/dev/null || vultrPrintStderr "${response}"
}

vultrServerList() {
  # ref. https://www.vultr.com/api/#server_server_list
  vultrSetCredentials
  response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/server/list")
  echo "${response}" | jq . 2>/dev/null || vultrPrintStderr "${response}"
}

vultrServerCreate() {
  # ref. https://www.vultr.com/api/#server_create
  vultrServerDCID="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: DCID integer Location to create this virtual machine in." "See:" "  $ vultr regions list")"}"
  vultrServerVPSPLANID="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2: VPSPLANID integer Plan to use when creating this virtual machine." "See:" "  $ vultr plans list")"}"
  vultrServerOSID="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3: OSID integer Operating system to use." "See:" "  $ vultr os list")"}"
  vultrSetCredentials
  response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/server/create" \
      -d "DCID=${vultrServerDCID}" \
      -d "VPSPLANID=${vultrServerVPSPLANID}" \
      -d "OSID=${vultrServerOSID}"
  )
  echo "${response}" | jq . 2>/dev/null || vultrPrintStderr "${response}"
}

vultrToolsGetOSUbuntu1804() {
  vultrOSList | jq '.[] | select( .name == "Ubuntu 18.04 x64" )'
}

vultrToolsGetPlanRAM1024() {
  vultrPlansList | jq '.[] | select( .ram == "1024" )'
}

vultrToolsGetDCTokyo() {
  vultrRegionsList | jq '.[] | select( .name == "Tokyo" )'
}

vultrMain() {
  subCommand="$1"
  subSubCommand="$2"

  if [ "$2" ]; then shift || true; fi
  if [ "$1" ]; then shift || true; fi

  # shellcheck disable=1004,SC2016
  getSubCmds='''
    declare -f vultrMain \
      | grep -Eo "^ {8}[^ ]+ *)" \
      | grep -Ev "^ {8}(subcmds|\*)" \
      | tr -d "\n" \
      | sed "s/ *//g; s/)/ /g"
  '''

  # shellcheck disable=1004,SC2016
  getSubSubCmds='''
    declare -f vultrMain \
      | grep -Eo "^( {8}| {16})[^ ]+ *)" \
      | grep -Ev "^ {8}(subcmds|\*)" \
      | tr -d "\n" \
      | sed "s/.* \(${subCommand} *)[^\*]*\).*/\1/g; s/^${subCommand} *)//g; s/subcmds *)//g; s/ *//g; s/)/ /g"
  '''

  case "${subCommand}" in
    subcmds)
      eval "${getSubCmds}" ;;
    configure)
      case "${subSubCommand}" in
        subcmds) true ;;
        *      ) vultrConfigure ;;
      esac ;;
    os)
      case "${subSubCommand}" in
        subcmds) eval "${getSubSubCmds}" ;;
        list   ) vultrOSList "$@" ;;
        *      ) vultrPrintStderr "allowed value: $(bash "$0" "${subCommand}" subcmds)"; return 1 ;;
      esac ;;
    plans)
      case "${subSubCommand}" in
        subcmds) eval "${getSubSubCmds}" ;;
        list   ) vultrPlansList "$@" ;;
        *      ) vultrPrintStderr "allowed value: $(bash "$0" "${subCommand}" subcmds)"; return 1 ;;
      esac ;;
    regions)
      case "${subSubCommand}" in
        subcmds) eval "${getSubSubCmds}" ;;
        list   ) vultrRegionsList "$@" ;;
        *      ) vultrPrintStderr "allowed value: $(bash "$0" "${subCommand}" subcmds)"; return 1 ;;
      esac ;;
    server)
      case "${subSubCommand}" in
        subcmds    ) eval "${getSubSubCmds}" ;;
        create     ) vultrServerCreate "$@" ;;
        list       ) vultrServerList "$@" ;;
        *          ) vultrPrintStderr "allowed value: $(bash "$0" "${subCommand}" subcmds)"; return 1 ;;
      esac ;;
    tools)
      case "${subSubCommand}" in
        subcmds          ) eval "${getSubSubCmds}" ;;
        get-os-ubuntu1804) vultrToolsGetOSUbuntu1804 "$@" ;;
        get-plan-ram1024 ) vultrToolsGetPlanRAM1024 "$@" ;;
        get-dc-tokyo     ) vultrToolsGetDCTokyo "$@" ;;
        *                ) vultrPrintStderr "allowed value: $(bash "$0" "${subCommand}" subcmds)"; return 1;;
      esac ;;
    *)
      vultrPrintStderr "allowed value: $(bash "$0" subcmds)"; return 1 ;;
  esac
} && vultrMain "$@"

# -- Non Interactive ----------------
else
# -- Interactive ----------------


##
# vultr command as bash-completion
#
# The following function is for bash-completion.
# When executing script as a command,
# the following function is not defined nor executed.
#
# shellcheck disable=SC2016,SC2034,SC2039
##
__complete_vultr() {
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword
  if [ "${cword}" -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(vultr subcmds)"'" -- "${cur}") )'
  elif [ "${cword}" -eq 2 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(vultr "${prev}" subcmds)"'" -- "${cur}") )'
  fi
}
# shellcheck disable=SC2039
[ -z "$(command -v complete)" ] || complete -F __complete_vultr vultr

# -- Interactive ----------------
fi
