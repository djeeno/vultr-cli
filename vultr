#!/bin/sh
# shellcheck disable=SC1090

##
# If in non interactive shell ( "$-" not containing "i" ),
# execute script as command.
##
if ! { echo "$-" | grep -q i; }; then
# -- Non Interactive ----------------

# If an error occurs, EXIT abnormally.
set -e -o pipefail

##
# constants
##
VULTR_VERSION='0.0.3'
VULTR_PROGRAM_NAME="$(basename -- "$0")"



##
# common
##
PrintStderr() {
  echo "$*" 1>&2
}

CheckDependency() { (
  for cmd in "$@"; do
    if ! command -v -- "${cmd}" >/dev/null; then
      PrintStderr "\"${cmd}\" not found in \$PATH"
      exit 1
    fi
  done
)}

VULTR_CREDENTIALS_FILE="$HOME/.vultr/credentials"

VultrConfigure() {
  if [ -e "${VULTR_CREDENTIALS_FILE}" ]; then
    PrintStderr "already exist: ${VULTR_CREDENTIALS_FILE}"
    exit 1
  fi
  mkdir -p "$(dirname -- "${VULTR_CREDENTIALS_FILE}")"
  echo "ref. https://my.vultr.com/settings/#settingsapi"
  stty -echo
  printf '%s' 'Vultr API key: '
  read -r VultrAPIKey
  stty echo
  echo
  if [ -z "${VultrAPIKey}" ]; then
    PrintStderr "Vultr API key not set"
    exit 1
  fi
  echo "VultrAPIKey=${VultrAPIKey}" | tee "${VULTR_CREDENTIALS_FILE}" 1>/dev/null
  chown -R "$(id -u)":"$(id -g)" "$(dirname -- "${VULTR_CREDENTIALS_FILE}")"
  chmod -R go-rwx "$(dirname -- "${VULTR_CREDENTIALS_FILE}")"
}

VultrSetCredentials() {
  if [ -f "${VULTR_CREDENTIALS_FILE}" ] && [ -r "${VULTR_CREDENTIALS_FILE}" ]; then
    . "${VULTR_CREDENTIALS_FILE}"
  else
    PrintStderr "Credentials file does not found: ${VULTR_CREDENTIALS_FILE}"
    PrintStderr "For set credentials, run:"
    PrintStderr "  $ vultr configure"
    exit 1
  fi
}

VultrJSON() {
  if command -v jq 1>/dev/null; then
    "$(command -v jq)" . < /dev/stdin
  elif command -v python 1>/dev/null; then
    "$(command -v python)" -m json.tool < /dev/stdin
  elif command -v ruby 1>/dev/null; then
    "$(command -v ruby)" -r json -e 'puts JSON.pretty_generate(JSON.parse(STDIN.read))' < /dev/stdin
  elif command -v perl 1>/dev/null; then
    # shellcheck disable=SC2016
    "$(command -v perl)" -MEncode -MJSON::PP -e '$json=JSON::PP->new->pretty; $obj=$json->decode(decode_utf8(join("",(<STDIN>)))); print encode_utf8($json->encode($obj))'
  else
    # plain output
    cat /dev/stdin
  fi
}



##
# account
##
VultrAccountInfo() {
  # ref. https://www.vultr.com/api/#account_info
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/account/info")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# firewall
##
VultrFirewallGroupCreate() {
  # ref. https://www.vultr.com/api/#firewall_group_create
  CheckDependency curl
  vultr_firewall_group_description="${1:?"$(printf '\n%s' "Set \$1: description string (optional) Description of firewall group.")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/firewall/group_create" \
      -d "description=${vultr_firewall_group_description}" \
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrFirewallGroupDelete() {
  # ref. https://www.vultr.com/api/#firewall_group_delete
  CheckDependency curl
  vultr_firewall_group_id="${1:?"$(printf '\n%s' "Set \$1: FIREWALLGROUPID string Firewall group to delete." "See:" "  $ vultr firewall group-list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/firewall/group_delete" \
      -d "FIREWALLGROUPID=${vultr_firewall_group_id}" \
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrFirewallGroupList() {
  # ref. https://www.vultr.com/api/#firewall_group_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/firewall/group_list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# network
##
VultrNetworkCreate() {
  # ref. https://www.vultr.com/api/#network_create
  CheckDependency curl
  vultr_network_dcid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: DCID integer Location for the network." "See:" "  $ vultr regions list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/network/create" \
      -d "DCID=${vultr_network_dcid}" \
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrNetworkCreateWithOptional() {
  # ref. https://www.vultr.com/api/#network_create
  CheckDependency curl
  vultr_network_dcid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: DCID integer Location for the network." "See:" "  $ vultr regions list")"}"
  vultr_network_description="${2:?"$(printf '\n%s' "Set \$2: description string (optional) Description of network.")"}"
  vultr_network_v4_subnet="${3:?"$(printf '\n%s' "Set \$3: v4_subnet string (optional) IPv4 network to be used when attaching servers to this network.")"}"
  vultr_network_v4_subnet_mask="${4:?"$(printf '\n%s' "Set \$4: v4_subnet_mask int (optional) Network mask corresponding with the v4_subnet.")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/network/create" \
      -d "DCID=${vultr_network_dcid}" \
      -d "description=${vultr_network_description}" \
      -d "v4_subnet=${vultr_network_v4_subnet}" \
      -d "v4_subnet_mask=${vultr_network_v4_subnet_mask}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrNetworkList() {
  # ref. https://www.vultr.com/api/#network_network_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/network/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# os
##
VultrOSList() {
  # ref. https://www.vultr.com/api/#os_os_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/os/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# plans
##
VultrPlansList() {
  # ref. https://www.vultr.com/api/#plans_plan_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/plans/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# regions
##
VultrRegionsList() {
  # ref. https://www.vultr.com/api/#regions_region_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/regions/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# server
##
VultrServerCreate() {
  # ref. https://www.vultr.com/api/#server_create
  CheckDependency curl
  vultr_server_dcid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: DCID integer Location to create this virtual machine in." "See:" "  $ vultr regions list")"}"
  vultr_server_vpsplanid="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2: VPSPLANID integer Plan to use when creating this virtual machine." "See:" "  $ vultr plans list")"}"
  vultr_server_osid="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3: OSID integer Operating system to use." "See:" "  $ vultr os list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/server/create" \
      -d "DCID=${vultr_server_dcid}" \
      -d "VPSPLANID=${vultr_server_vpsplanid}" \
      -d "OSID=${vultr_server_osid}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrServerCreateWithOptional() {
  # ref. https://www.vultr.com/api/#server_create
  CheckDependency curl
  vultr_server_dcid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: DCID integer Location to create this virtual machine in." "See:" "  $ vultr regions list")"}"
  vultr_server_vpsplanid="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2: VPSPLANID integer Plan to use when creating this virtual machine." "See:" "  $ vultr plans list")"}"
  vultr_server_osid="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3: OSID integer Operating system to use." "See:" "  $ vultr os list")"}"
  vultr_server_enable_private_network="${4:?"$(printf '\n%s' "Set \$4: enable_private_network string (optional) 'yes' or 'no'. If yes, private networking support will be added to the new server.")"}"
  vultr_server_base64_encoded_userdata="${5:?"$(printf '\n%s' "Set \$5: userdata string (optional) Base64 encoded user-data")"}"
  vultr_server_label="${6:?"$(printf '\n%s' "Set \$6: label string (optional) This is a text label that will be shown in the control panel")"}"
  vultr_server_tag="${7:?"$(printf '\n%s' "Set \$7: tag string (optional) The tag to assign to this server.")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/server/create" \
      -d "DCID=${vultr_server_dcid}" \
      -d "VPSPLANID=${vultr_server_vpsplanid}" \
      -d "OSID=${vultr_server_osid}" \
      -d "enable_private_network=${vultr_server_enable_private_network}" \
      -d "userdata=${vultr_server_base64_encoded_userdata}" \
      -d "label=${vultr_server_label}" \
      -d "tag=${vultr_server_tag}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrServerDestroy() {
  # ref. https://www.vultr.com/api/#server_destroy
  CheckDependency curl
  vultr_server_subid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: SUBID integer Unique identifier for this subscription." "See:" "  $ vultr server list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/server/destroy" \
      -d "SUBID=${vultr_server_subid}" \
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrServerList() {
  # ref. https://www.vultr.com/api/#server_server_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/server/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# sshkey
##
VultrSshkeyCreate() {
  # ref. https://www.vultr.com/api/#sshkey_create
  CheckDependency curl
  vultr_sshkey_name="${1:?"$(printf '\n%s' "Set \$1: name string Name of the SSH key")"}"
  vultr_sshkey_publicKey="${2:?"$(printf '\n%s' "Set \$2: ssh_key string SSH public key (in authorized_keys format)")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/sshkey/create" \
      -d "name=${vultr_sshkey_name}" \
      -d "ssh_key=${vultr_sshkey_publicKey}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrSshkeyDestroy() {
  # ref. https://www.vultr.com/api/#sshkey_destroy
  CheckDependency curl
  vultr_sshkeyid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: SSHKEYID string Unique identifier for this SSH key." "See:" "  $ vultr sshkey list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/sshkey/destroy" \
      -d "SSHKEYID=${vultr_sshkeyid}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrSshkeyList() {
  # ref. https://www.vultr.com/api/#sshkey_sshkey_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/sshkey/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}

VultrSshkeyUpdate() {
  # ref. https://www.vultr.com/api/#sshkey_update
  CheckDependency curl
  vultr_sshkeyid="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1: SSHKEYID string SSHKEYID of key to update (see /v1/sshkey/list)" "See:" "  $ vultr sshkey list")"}"
  vultr_sshkey_name="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2: name string New name for the SSH key" "See:" "  $ vultr sshkey list")"}"
  vultr_sshkey_publicKey="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3: ssh_key string New SSH key contents" "See:" "  $ vultr sshkey list")"}"
  VultrSetCredentials
  vultr_api_response=$(
    curl -sS -H "API-Key: ${VultrAPIKey}" -X POST "https://api.vultr.com/v1/sshkey/update" \
      -d "SSHKEYID=${vultr_sshkeyid}" \
      -d "name=${vultr_sshkey_name}" \
      -d "ssh_key=${vultr_sshkey_publicKey}"
  )
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# startupscript
##
VultrStartupscriptList() {
  # ref. https://www.vultr.com/api/#startupscript_startupscript_list
  CheckDependency curl
  VultrSetCredentials
  vultr_api_response=$(curl -sS -H "API-Key: ${VultrAPIKey}" -X GET "https://api.vultr.com/v1/startupscript/list")
  echo "${vultr_api_response}" | VultrJSON 2>/dev/null || PrintStderr "${vultr_api_response}"
}



##
# tools
##
VultrToolsGetOSUbuntu1804() { CheckDependency jq; VultrOSList | jq '.[] | select( .name == "Ubuntu 18.04 x64" )'; }
VultrToolsGetPlanRAM1024() { CheckDependency jq; VultrPlansList | jq '.[] | select( .ram == "1024" )'; }
VultrToolsGetDCTokyo() { CheckDependency jq; VultrRegionsList | jq '.[] | select( .name == "Tokyo" )'; }

VultrToolsServerCreateTokyoRAM1024Ubuntu1804() {
  VultrServerCreateWithOptional 25 201 270 yes IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUK "tmp$(TZ=UTC date +%Y%m%dT%H%M%SZ)" tmp
}

VultrToolsServerCreateK8sClusterSingleMaster() {
  VultrServerCreateWithOptional 25 201 270 yes IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUK k8s001master001 k8s001
  VultrServerCreateWithOptional 25 201 270 yes IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUK k8s001worker001 k8s001
  VultrServerCreateWithOptional 25 201 270 yes IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUK k8s001worker002 k8s001
  VultrServerCreateWithOptional 25 201 270 yes IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUK k8s001worker003 k8s001
}



##
# main
##
VultrMain() {  ## main start DO NOT REMOVE ##
  sub_command="$1"
  sub2_command="$2"

  if [ "$2" ]; then shift || true; fi
  if [ "$1" ]; then shift || true; fi

  # shellcheck disable=SC2034
  vultr_main_method_content=$(
    vultr_main_tail=$(tail -n +"$(grep -n "## main start DO NOT REMOVE ##$" "$0" | cut -d: -f1)" "$0")
    echo "${vultr_main_tail}" | head -n +"$(echo "${vultr_main_tail}" | grep -n "## main end DO NOT REMOVE ##$" | cut -d: -f1)"
  )

  # shellcheck disable=1004,SC2016
  get_sub_cmds='''
    echo "${vultr_main_method_content}" \
      | grep -Eo "^ {4}[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*|completion)" \
      | tr -d "\n" \
      | sed "s/ *//g; s/)/ /g"
  '''

  # shellcheck disable=1004,SC2016
  get_sub2_cmds='''
    echo "${vultr_main_method_content}" \
      | grep -Eo "^( {4}| {8})[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*)|^ {8}subcmds" \
      | tr -d "\n" \
      | sed "s/.* \(${sub_command} *)[^\*]*\).*/\1/g; s/^${sub_command} *)//g; s/ *//g; s/)/ /g"
  '''

  case "${sub_command}" in
    subcmds)
      eval "${get_sub_cmds}" ;;
    completion)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo ". $(cd "$(dirname "$0")"; pwd)/$(basename -- "$0")" ;;
      esac ;;
    configure)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) VultrConfigure ;;
      esac ;;
    account)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        info   ) VultrAccountInfo "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    firewall)
      case "${sub2_command}" in
        subcmds     ) eval "${get_sub2_cmds}" ;;
        group-create) VultrFirewallGroupCreate "$@" ;;
        group-delete) VultrFirewallGroupDelete "$@" ;;
        group-list  ) VultrFirewallGroupList "$@" ;;
        *           ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    network)
      case "${sub2_command}" in
        subcmds             ) eval "${get_sub2_cmds}" ;;
        create              ) VultrNetworkCreate "$@" ;;
        create-with-optional) VultrNetworkCreateWithOptional "$@" ;;
        list                ) VultrNetworkList "$@" ;;
        *                   ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    os)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) VultrOSList "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    plans)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) VultrPlansList "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    regions)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) VultrRegionsList "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    server)
      case "${sub2_command}" in
        subcmds             ) eval "${get_sub2_cmds}" ;;
        create              ) VultrServerCreate "$@" ;;
        create-with-optional) VultrServerCreateWithOptional "$@" ;;
        destroy             ) VultrServerDestroy "$@" ;;
        list                ) VultrServerList "$@" ;;
        *                   ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    sshkey)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        create ) VultrSshkeyCreate "$@" ;;
        destroy) VultrSshkeyDestroy "$@" ;;
        list   ) VultrSshkeyList "$@" ;;
        update ) VultrSshkeyUpdate "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    startupscript)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) VultrStartupscriptList "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    tools)
      case "${sub2_command}" in
        subcmds                               ) eval "${get_sub2_cmds}" ;;
        get-os-ubuntu1804                     ) VultrToolsGetOSUbuntu1804 "$@" ;;
        get-plan-ram1024                      ) VultrToolsGetPlanRAM1024 "$@" ;;
        get-dc-tokyo                          ) VultrToolsGetDCTokyo "$@" ;;
        server-create-tokyo-ram1024-ubuntu1804) VultrToolsServerCreateTokyoRAM1024Ubuntu1804 "$@" ;;
        server-create-k8s-cluster             ) VultrToolsServerCreateK8sCluster "$@" ;;
        *                                     ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1;;
      esac ;;
    version)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo "${VULTR_PROGRAM_NAME} ${VULTR_VERSION}" ;;
      esac ;;
    *)
      PrintStderr "allowed value: $(bash "$0" subcmds)"; return 1 ;;
  esac
} && VultrMain "$@"  ## main end DO NOT REMOVE ##

# -- Non Interactive ----------------
else
# -- Interactive ----------------


##
# vultr command as bash-completion
#
# The following function is for bash-completion.
# When executing script as a command,
# the following function is not defined nor executed.
#
# shellcheck disable=SC2016,SC2034,SC2039
##
__complete_vultr() {
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword
  if [ "${cword}" -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(vultr subcmds)"'" -- "${cur}") )'
  elif [ "${cword}" -eq 2 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(vultr "${prev}" subcmds)"'" -- "${cur}") )'
  fi
}
# shellcheck disable=SC2039
{ ! command -v complete 1>/dev/null; } || complete -F __complete_vultr vultr

# -- Interactive ----------------
fi
